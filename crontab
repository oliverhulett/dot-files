HOME=/home/olihul
MAILTO=olihul@optiver.com.au

## Disc tweaks can cause a lot of dirty pages to accumulate in memory, force an hourly sync to keep on top of it.
## Only force sync if CPU % Idle time is more than 75% over the last 10 seconds.
@hourly [ $(mpstat 1 10 | tail -n1 | awk '{print int($10)}') -gt 75 ] && sync >/dev/null 2>/dev/null

## This section, for backups, should run @daily, but the local backups need to happen before the off box backups so that
## we're saving the latest stuff off box, hence the 5 minute delay for the off box lines at the end.
## Crontabs live in /var/spool/, so take a backup of this crontab on a separate partition.
00 0 * * *  crontab -l >${HOME}/etc/dot-files/crontab && echo "## Backed up at `date`" >>${HOME}/etc/dot-files/crontab
## Save list of installed software
00 0 * * *  rpm -qa | sort >${HOME}/etc/dot-files/installed-software.txt
## Backup a small number of key system-wide configuration files.
00 0 * * *  rsync -PAXrogthlm --files-from=${HOME}/etc/dot-files/backups.txt / ${HOME}/etc/ >/dev/null
## Commit dot-files to git for extra backups
10 0 * * *  cd ${HOME}/etc/dot-files && git commit --allow-empty -aqm "Autocommit: $(date -R)\n$(git status)" && git push -q >/dev/null 2>/dev/null
## Push local configuration and backups to another box.
15 0 * * *  rsync -PAXrogthlm ${HOME}/etc/ /media/sf_H_DRIVE/etc/ >/dev/null
15 0 * * *  rsync -PAXrogthlm ${HOME}/opt/ /media/sf_H_DRIVE/opt/ >/dev/null
## Install dot-files to development machines
15 0 * * *  PATH="${HOME}/bin:${PATH}" ${HOME}/bin/install-dot-files.sh >/dev/null

## Keep /usr/local/bin up-to-date
@daily  rsync -zPAXrogthlm opsynxsr0335:/usr/local/bin/ /usr/local/bin/ >/dev/null
## Keep /opt/optiver up-to-date
@daily  docker run --rm -v /opt/optiver:/mnt docker-registry.aus.optiver.com/servicedelivery/el5-development /bin/bash -c "rsync -zPAXrogthlm --delete --exclude='gcc/4.7.2' --delete-excluded /opt/optiver/ /mnt/ && chown -R $(id -u olihul) /mnt/" >/dev/null
## Keep ~/repo up-to-date
@daily find ${HOME}/repo/ -type d -exec test -d "{}/.git" \; -prune -print | while read; do ( cd "$REPLY" && git pullb -q >/dev/null && git update >/dev/null && ( [ ! -f pins.json ] || git checkout pins.json >/dev/null ) ) || echo -e "\n${REPLY} Update Failed\n\n"; done

## Clean builds every now and then
@weekly find ${HOME}/repo/ -name .git -prune | while read; do ( cd "$(dirname "$REPLY")" && [ -e build.py ] && ( ./build.py -c -t all || echo -e "\n${REPLY} Clean Failed\n\n" ) ); done
@weekly find ${HOME}/repo/ -name .prof -exec rm -rf "{}" \;
## Clean /tmp every now and then
@weekly find /tmp /var/tmp -xdev -not -exec /sbin/fuser -s "{}" \; -delete 2>/dev/null

## Clean docker containers and images every now and then
@weekly docker rm $(docker ps -a -q)
@weekly docker rmi $(docker images -q)

## Backed up at Sun Dec 18 00:00:01 AEDT 2016
