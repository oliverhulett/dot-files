## The master crontab for 3100-centos7dev (my VM) is /var/spool/crontab.  Edit the crontab with `crontab -e` always.
## There is a backup of the crontab in ~/dot-files, but that is not the master, it is only used to bootstrap the crontab
## after a machine re-build (e.g. vagrant destroy && vagrant up)
HOME=/home/olihul
MAILTO=olihul@optiver.com.au

## Disc tweaks can cause a lot of dirty pages to accumulate in memory, force an hourly sync to keep on top of it.
## Only force sync if CPU % Idle time is more than 75% over the last 10 seconds.
@hourly [ $(mpstat 1 10 | tail -n1 | awk '{print int($10)}') -gt 75 ] && sync >/dev/null 2>/dev/null

## Run backups
50 18 * * * ${HOME}/dot-files/backup.sh
## Port dot-files home.
00 19 * * 1-5 cd ${HOME}/repo/oliverhulett/dot-files/master && git commit --allow-empty -aqm "Autocommit: $(date -R)\n$(git status --short)" && git pullb && git push --quiet --all
05 19 * * 1-5 cd ${HOME}/repo/oliverhulett/dot-files/master && git pullb && ./sync-other-remote.sh && git push --quiet --all
00 08 * * 1-5 cd ${HOME}/repo/olihul/dot-files/master && git pullb && ./sync-other-remote.sh && git push --quiet --all

## Install dot-files to development machines.  Sleep for 10 so that the backup script has had a chance to commit the latest dot-files.
@daily PATH="${HOME}/dot-files/bin:${PATH}" ${HOME}/dot-files/bin/install-dot-files.sh >/dev/null 2>/dev/null
## Install my personal docker image (which I should use more.)  Sleep for 10 so that the backup script has had a chance to commit the latest dot-files.
@daily cd "${HOME}/dot-files/images/c7" && make release

## Keep ~/repo up-to-date.
@daily find ${HOME}/repo/ -type d -exec test -d "{}/.git" \; -prune -print | while read; do ( cd "$REPLY" && git pullb -q >/dev/null 2>/dev/null && git update >/dev/null 2>/dev/null && ( [ ! -f pins.json ] || git checkout pins.json >/dev/null ) ) || echo -e "\n${REPLY} Update Failed\n\n"; done

## Clean builds every now and then.
@weekly find ${HOME}/repo/ -name .git -prune | while read; do ( cd "$(dirname "$REPLY")" && [ -e build.py ] && ( ./build.py -c -t all || echo -e "\n${REPLY} Clean Failed\n\n" ) ); done
@weekly find ${HOME}/repo/ -name .prof -exec rm -rf "{}" \;
## Clean /tmp every now and then.
@weekly find /tmp /var/tmp -xdev -not -exec /sbin/fuser -s "{}" \; -delete 2>/dev/null

## Clean docker containers and images every now and then.
@weekly [ $(docker ps -a -q | wc -l) -gt 0 ] && docker rm $(docker ps -a -q)
@weekly [ $(docker images -q | wc -l) -gt 0 ] && docker rmi $(docker images -q)
## Kill docker containers running overnight, you can always re-start them.
@daily [ $(docker ps -q | wc -l) -gt 0 ] && docker kill $(docker ps -q)
## Pull favourite docker images nightly.  Sleep a bit first so that an `docker rm` or `docker rmi` has finished first.
@daily sleep 10 && cat "${HOME}/.docker_favourites" | xargs -n1 -P0 docker pull

## Python virtualenv should be refreshed regularly.
@daily source "${HOME}/.bash_aliases/09-profile.d-pyvenv.sh" && rm -rf "${PYVENV_HOME}" && ${HOME}/dot-files/bin/python_setup.sh

## Backed up at Wed Aug 16 18:50:07 AEST 2017 by olihul
